(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var each=require("@turf/meta").coordEach;module.exports=function(r){var e=[1/0,1/0,-(1/0),-(1/0)];return each(r,function(r){e[0]>r[0]&&(e[0]=r[0]),e[1]>r[1]&&(e[1]=r[1]),e[2]<r[0]&&(e[2]=r[0]),e[3]<r[1]&&(e[3]=r[1])}),e};
},{"@turf/meta":12}],2:[function(require,module,exports){
var linestring=require("@turf/helpers").lineString,Spline=require("./spline.js");module.exports=function(r,e,n){var i=linestring([]);i.properties=r.properties;for(var o=new Spline({points:r.geometry.coordinates.map(function(r){return{x:r[0],y:r[1]}}),duration:e,sharpness:n}),t=0;t<o.duration;t+=10){var s=o.pos(t);Math.floor(t/100)%2===0&&i.geometry.coordinates.push([s.x,s.y])}return i};

},{"./spline.js":3,"@turf/helpers":7}],3:[function(require,module,exports){
var Spline=function(s){this.points=s.points||[],this.duration=s.duration||1e4,this.sharpness=s.sharpness||.85,this.centers=[],this.controls=[],this.stepLength=s.stepLength||60,this.length=this.points.length,this.delay=0;for(var t=0;t<this.length;t++)this.points[t].z=this.points[t].z||0;for(var t=0;t<this.length-1;t++){var i=this.points[t],h=this.points[t+1];this.centers.push({x:(i.x+h.x)/2,y:(i.y+h.y)/2,z:(i.z+h.z)/2})}this.controls.push([this.points[0],this.points[0]]);for(var t=0;t<this.centers.length-1;t++){var i=this.centers[t],h=this.centers[t+1],n=this.points[t+1].x-(this.centers[t].x+this.centers[t+1].x)/2,e=this.points[t+1].y-(this.centers[t].y+this.centers[t+1].y)/2,r=this.points[t+1].z-(this.centers[t].y+this.centers[t+1].z)/2;this.controls.push([{x:(1-this.sharpness)*this.points[t+1].x+this.sharpness*(this.centers[t].x+n),y:(1-this.sharpness)*this.points[t+1].y+this.sharpness*(this.centers[t].y+e),z:(1-this.sharpness)*this.points[t+1].z+this.sharpness*(this.centers[t].z+r)},{x:(1-this.sharpness)*this.points[t+1].x+this.sharpness*(this.centers[t+1].x+n),y:(1-this.sharpness)*this.points[t+1].y+this.sharpness*(this.centers[t+1].y+e),z:(1-this.sharpness)*this.points[t+1].z+this.sharpness*(this.centers[t+1].z+r)}])}return this.controls.push([this.points[this.length-1],this.points[this.length-1]]),this.steps=this.cacheSteps(this.stepLength),this};Spline.prototype.cacheSteps=function(s){var t=[],i=this.pos(0);t.push(0);for(var h=0;h<this.duration;h+=10){var n=this.pos(h),e=Math.sqrt((n.x-i.x)*(n.x-i.x)+(n.y-i.y)*(n.y-i.y)+(n.z-i.z)*(n.z-i.z));e>s&&(t.push(h),i=n)}return t},Spline.prototype.vector=function(s){var t=this.pos(s+10),i=this.pos(s-10);return{angle:180*Math.atan2(t.y-i.y,t.x-i.x)/3.14,speed:Math.sqrt((i.x-t.x)*(i.x-t.x)+(i.y-t.y)*(i.y-t.y)+(i.z-t.z)*(i.z-t.z))}},Spline.prototype.pos=function(s){function t(s,t,i,h,n){var e=function(s){var t=s*s,i=t*s;return[i,3*t*(1-s),3*s*(1-s)*(1-s),(1-s)*(1-s)*(1-s)]},r=e(s),o={x:n.x*r[0]+h.x*r[1]+i.x*r[2]+t.x*r[3],y:n.y*r[0]+h.y*r[1]+i.y*r[2]+t.y*r[3],z:n.z*r[0]+h.z*r[1]+i.z*r[2]+t.z*r[3]};return o}var i=s-this.delay;i<0&&(i=0),i>this.duration&&(i=this.duration-1);var h=i/this.duration;if(h>=1)return this.points[this.length-1];var n=Math.floor((this.points.length-1)*h),e=(this.length-1)*h-n;return t(e,this.points[n],this.controls[n][1],this.controls[n+1][0],this.points[n+1])},module.exports=Spline;
},{}],4:[function(require,module,exports){
var bbox=require("@turf/bbox"),point=require("@turf/helpers").point;module.exports=function(r){var e=bbox(r),o=(e[0]+e[2])/2,t=(e[1]+e[3])/2;return point([o,t])};
},{"@turf/bbox":1,"@turf/helpers":7}],5:[function(require,module,exports){
var getCoord=require("@turf/invariant").getCoord,radiansToDistance=require("@turf/helpers").radiansToDistance;module.exports=function(t,a,r){var o=Math.PI/180,e=getCoord(t),n=getCoord(a),s=o*(n[1]-e[1]),i=o*(n[0]-e[0]),h=o*e[1],M=o*n[1],d=Math.pow(Math.sin(s/2),2)+Math.pow(Math.sin(i/2),2)*Math.cos(h)*Math.cos(M);return radiansToDistance(2*Math.atan2(Math.sqrt(d),Math.sqrt(1-d)),r)};

},{"@turf/helpers":7,"@turf/invariant":9}],6:[function(require,module,exports){
var featureCollection=require("@turf/helpers").featureCollection,each=require("@turf/meta").coordEach,point=require("@turf/helpers").point;module.exports=function(e){var r=[];return each(e,function(e){r.push(point(e))}),featureCollection(r)};

},{"@turf/helpers":7,"@turf/meta":12}],7:[function(require,module,exports){
function feature(e,r){return{type:"Feature",properties:r||{},geometry:e}}module.exports.feature=feature,module.exports.point=function(e,r){if(!Array.isArray(e))throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");return feature({type:"Point",coordinates:e.slice()},r)},module.exports.polygon=function(e,r){if(!e)throw new Error("No coordinates passed");for(var o=0;o<e.length;o++){var t=e[o];if(t.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var n=0;n<t[t.length-1].length;n++)if(t[t.length-1][n]!==t[0][n])throw new Error("First and last Position are not equivalent.")}return feature({type:"Polygon",coordinates:e},r)},module.exports.lineString=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"LineString",coordinates:e},r)},module.exports.featureCollection=function(e){return{type:"FeatureCollection",features:e}},module.exports.multiLineString=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"MultiLineString",coordinates:e},r)},module.exports.multiPoint=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"MultiPoint",coordinates:e},r)},module.exports.multiPolygon=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"MultiPolygon",coordinates:e},r)},module.exports.geometryCollection=function(e,r){return feature({type:"GeometryCollection",geometries:e},r)};var factors={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373};module.exports.radiansToDistance=function(e,r){var o=factors[r||"kilometers"];if(void 0===o)throw new Error("Invalid unit");return e*o},module.exports.distanceToRadians=function(e,r){var o=factors[r||"kilometers"];if(void 0===o)throw new Error("Invalid unit");return e/o},module.exports.distanceToDegrees=function(e,r){var o=factors[r||"kilometers"];if(void 0===o)throw new Error("Invalid unit");return e/o*57.2958};

},{}],8:[function(require,module,exports){
function inRing(n,r){for(var t=!1,e=0,i=r.length-1;e<r.length;i=e++){var o=r[e][0],a=r[e][1],g=r[i][0],v=r[i][1],f=a>n[1]!=v>n[1]&&n[0]<(g-o)*(n[1]-a)/(v-a)+o;f&&(t=!t)}return t}var invariant=require("@turf/invariant");module.exports=function(n,r){var t=invariant.getCoord(n),e=r.geometry.coordinates;"Polygon"===r.geometry.type&&(e=[e]);for(var i=0,o=!1;i<e.length&&!o;i++)if(inRing(t,e[i][0])){for(var a=!1,g=1;g<e[i].length&&!a;)inRing(t,e[i][g])&&(a=!0),g++;a||(o=!0)}return o};

},{"@turf/invariant":9}],9:[function(require,module,exports){
function getCoord(e){if(Array.isArray(e)&&"number"==typeof e[0]&&"number"==typeof e[1])return e;if(e){if("Feature"===e.type&&e.geometry&&"Point"===e.geometry.type&&Array.isArray(e.geometry.coordinates))return e.geometry.coordinates;if("Point"===e.type&&Array.isArray(e.coordinates))return e.coordinates}throw new Error("A coordinate, feature, or point geometry is required")}function geojsonType(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}function featureOf(e,r,t){if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function collectionOf(e,r,t){if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<e.features.length;o++){var n=e.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}}module.exports.geojsonType=geojsonType,module.exports.collectionOf=collectionOf,module.exports.featureOf=featureOf,module.exports.getCoord=getCoord;

},{}],10:[function(require,module,exports){
function length(e,t){for(var r,n=0,o=point(e[0]),i=point(e[0]),u=1;u<e.length;u++)i.geometry.coordinates=e[u],n+=distance(o,i,t),r=o,o=i,i=r;return n}var distance=require("@turf/distance"),point=require("@turf/helpers").point;module.exports=function e(t,r){if("FeatureCollection"===t.type)return t.features.reduce(function(t,n){return t+e(n,r)},0);var n,o,i="Feature"===t.type?t.geometry:t;if("LineString"===i.type)return length(i.coordinates,r);if("Polygon"===i.type||"MultiLineString"===i.type){for(n=0,o=0;o<i.coordinates.length;o++)n+=length(i.coordinates[o],r);return n}if("MultiPolygon"===t.type){for(n=0,o=0;o<i.coordinates.length;o++)for(var u=0;u<i.coordinates[o].length;u++)n+=length(i.coordinates[o][u],r);return n}throw new Error("input must be a LineString, MultiLineString, Polygon, or MultiPolygon Feature or Geometry (or a FeatureCollection containing only those types)")};

},{"@turf/distance":5,"@turf/helpers":7}],11:[function(require,module,exports){
var bearing=require("turf-bearing"),distance=require("turf-distance"),destination=require("turf-destination"),lineString=require("turf-helpers").lineString;module.exports=function(e,r,t,i){var n,o=[];if("Feature"===e.type)n=e.geometry.coordinates;else{if("LineString"!==e.type)throw new Error("input must be a LineString Feature or Geometry");n=e.coordinates}for(var u,a,s,g=0,d=0;d<n.length&&!(r>=g&&d===n.length-1);d++){if(g>r&&0===o.length){if(u=r-g,!u)return o.push(n[d]);a=bearing(n[d],n[d-1])-180,s=destination(n[d],u,a,i),o.push(s.geometry.coordinates)}if(g>=t)return(u=t-g)?(a=bearing(n[d],n[d-1])-180,s=destination(n[d],u,a,i),o.push(s.geometry.coordinates),lineString(o)):o.push(n[d]);g>=r&&o.push(n[d]),g+=distance(n[d],n[d+1],i)}return lineString(n[n.length-1])};

},{"turf-bearing":14,"turf-destination":15,"turf-distance":16,"turf-helpers":17}],12:[function(require,module,exports){
function coordEach(e,o,t){var r,n,c,l,u,p,i,a,f,s,h=0,d="FeatureCollection"===e.type,y="Feature"===e.type,g=d?e.features.length:1;for(r=0;r<g;r++)for(f=d?e.features[r].geometry:y?e.geometry:e,s="GeometryCollection"===f.type,i=s?f.geometries.length:1,l=0;l<i;l++)if(p=s?f.geometries[l]:f,a=p.coordinates,h=!t||"Polygon"!==p.type&&"MultiPolygon"!==p.type?0:1,"Point"===p.type)o(a);else if("LineString"===p.type||"MultiPoint"===p.type)for(n=0;n<a.length;n++)o(a[n]);else if("Polygon"===p.type||"MultiLineString"===p.type)for(n=0;n<a.length;n++)for(c=0;c<a[n].length-h;c++)o(a[n][c]);else if("MultiPolygon"===p.type)for(n=0;n<a.length;n++)for(c=0;c<a[n].length;c++)for(u=0;u<a[n][c].length-h;u++)o(a[n][c][u]);else{if("GeometryCollection"!==p.type)throw new Error("Unknown Geometry Type");for(n=0;n<p.geometries.length;n++)coordEach(p.geometries[n],o,t)}}function coordReduce(e,o,t,r){return coordEach(e,function(e){t=o(t,e)},r),t}function propEach(e,o){var t;switch(e.type){case"FeatureCollection":for(t=0;t<e.features.length;t++)o(e.features[t].properties);break;case"Feature":o(e.properties)}}function propReduce(e,o,t){return propEach(e,function(e){t=o(t,e)}),t}function featureEach(e,o){if("Feature"===e.type)o(e);else if("FeatureCollection"===e.type)for(var t=0;t<e.features.length;t++)o(e.features[t])}function coordAll(e){var o=[];return coordEach(e,function(e){o.push(e)}),o}module.exports.coordEach=coordEach,module.exports.coordReduce=coordReduce,module.exports.propEach=propEach,module.exports.propReduce=propReduce,module.exports.featureEach=featureEach,module.exports.coordAll=coordAll;

},{}],13:[function(require,module,exports){
function pointOnSurface(e){"FeatureCollection"!==e.type&&("Feature"!==e.type&&(e={type:"Feature",geometry:e,properties:{}}),e=featureCollection([e]));for(var t=centroid(e),r=!1,o=0;!r&&o<e.features.length;){var n,i,a,s,u,c,f,d=e.features[o].geometry,l=!1;if("Point"===d.type)t.geometry.coordinates[0]===d.coordinates[0]&&t.geometry.coordinates[1]===d.coordinates[1]&&(r=!0);else if("MultiPoint"===d.type){var g=!1;for(f=0;!g&&f<d.coordinates.length;)t.geometry.coordinates[0]===d.coordinates[f][0]&&t.geometry.coordinates[1]===d.coordinates[f][1]&&(r=!0,g=!0),f++}else if("LineString"===d.type)for(f=0;!l&&f<d.coordinates.length-1;)n=t.geometry.coordinates[0],i=t.geometry.coordinates[1],a=d.coordinates[f][0],s=d.coordinates[f][1],u=d.coordinates[f+1][0],c=d.coordinates[f+1][1],pointOnSegment(n,i,a,s,u,c)&&(l=!0,r=!0),f++;else if("MultiLineString"===d.type)for(var p=0;p<d.coordinates.length;){l=!1,f=0;for(var y=d.coordinates[p];!l&&f<y.length-1;)n=t.geometry.coordinates[0],i=t.geometry.coordinates[1],a=y[f][0],s=y[f][1],u=y[f+1][0],c=y[f+1][1],pointOnSegment(n,i,a,s,u,c)&&(l=!0,r=!0),f++;p++}else if("Polygon"===d.type||"MultiPolygon"===d.type){var m={type:"Feature",geometry:d,properties:{}};inside(t,m)&&(r=!0)}o++}if(r)return t;var h=featureCollection([]);for(o=0;o<e.features.length;o++)h.features=h.features.concat(explode(e.features[o]).features);var v,q=1/0;for(o=0;o<h.features.length;o++){var S=distance(t,h.features[o],"miles");S<q&&(q=S,v=h.features[o])}return v}function pointOnSegment(e,t,r,o,n,i){var a=Math.sqrt((n-r)*(n-r)+(i-o)*(i-o)),s=Math.sqrt((e-r)*(e-r)+(t-o)*(t-o)),u=Math.sqrt((n-e)*(n-e)+(i-t)*(i-t));if(a===s+u)return!0}var featureCollection=require("@turf/helpers").featureCollection,centroid=require("@turf/center"),distance=require("@turf/distance"),inside=require("@turf/inside"),explode=require("@turf/explode");module.exports=pointOnSurface;
},{"@turf/center":4,"@turf/distance":5,"@turf/explode":6,"@turf/helpers":7,"@turf/inside":8}],14:[function(require,module,exports){
var getCoord=require("turf-invariant").getCoord;module.exports=function(t,a){var o=Math.PI/180,r=180/Math.PI,h=getCoord(t),M=getCoord(a),e=o*h[0],n=o*M[0],s=o*h[1],i=o*M[1],c=Math.sin(n-e)*Math.cos(i),d=Math.cos(s)*Math.sin(i)-Math.sin(s)*Math.cos(i)*Math.cos(n-e),u=r*Math.atan2(c,d);return u};
},{"turf-invariant":18}],15:[function(require,module,exports){
var getCoord=require("turf-invariant").getCoord,helpers=require("turf-helpers"),point=helpers.point,distanceToRadians=helpers.distanceToRadians;module.exports=function(a,t,s,n){var e=Math.PI/180,i=180/Math.PI,o=getCoord(a),h=e*o[0],r=e*o[1],M=e*s,d=distanceToRadians(t,n),c=Math.asin(Math.sin(r)*Math.cos(d)+Math.cos(r)*Math.sin(d)*Math.cos(M)),p=h+Math.atan2(Math.sin(M)*Math.sin(d)*Math.cos(r),Math.cos(d)-Math.sin(r)*Math.sin(c));return point([i*p,i*c])};

},{"turf-helpers":17,"turf-invariant":18}],16:[function(require,module,exports){
var getCoord=require("turf-invariant").getCoord,radiansToDistance=require("turf-helpers").radiansToDistance;module.exports=function(t,a,r){var o=Math.PI/180,e=getCoord(t),n=getCoord(a),s=o*(n[1]-e[1]),i=o*(n[0]-e[0]),h=o*e[1],M=o*n[1],d=Math.pow(Math.sin(s/2),2)+Math.pow(Math.sin(i/2),2)*Math.cos(h)*Math.cos(M);return radiansToDistance(2*Math.atan2(Math.sqrt(d),Math.sqrt(1-d)),r)};

},{"turf-helpers":17,"turf-invariant":18}],17:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],18:[function(require,module,exports){
function getCoord(e){if(Array.isArray(e)&&"number"==typeof e[0]&&"number"==typeof e[1])return e;if(e){if("Feature"===e.type&&e.geometry&&"Point"===e.geometry.type&&Array.isArray(e.geometry.coordinates))return e.geometry.coordinates;if("Point"===e.type&&Array.isArray(e.coordinates))return e.coordinates}throw new Error("A coordinate, feature, or point geometry is required")}function geojsonType(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}function featureOf(e,r,t){if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function collectionOf(e,r,t){if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<e.features.length;o++){var n=e.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}}module.exports.geojsonType=geojsonType,module.exports.collectionOf=collectionOf,module.exports.featureOf=featureOf,module.exports.getCoord=getCoord;
},{}],19:[function(require,module,exports){
module.exports={pointOnSurface:require("@turf/point-on-surface"),lineSliceAlong:require("@turf/line-slice-along"),bezier:require("@turf/bezier"),lineDistance:require("@turf/line-distance")};
},{"@turf/bezier":2,"@turf/line-distance":10,"@turf/line-slice-along":11,"@turf/point-on-surface":13}]},{},[19])(19)
});